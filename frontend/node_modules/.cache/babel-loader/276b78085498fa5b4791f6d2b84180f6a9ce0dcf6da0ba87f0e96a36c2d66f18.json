{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/Notiy/frontend/src/screens/ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { passwordReset } from \"../actions/forgotPasswordActions\";\nimport Spinner from \"../components/Spinner\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { RESET_PASSWORD_RESET } from \"../constants/forgotPasswordConstants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const {\n    token\n  } = useParams();\n  const navigate = useNavigate();\n  const resetPassword = useSelector(state => state.resetPassword);\n  const {\n    loading,\n    error,\n    user\n  } = resetPassword;\n  const dispatch = useDispatch();\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(passwordReset(token, password));\n  };\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      dispatch({\n        type: RESET_PASSWORD_RESET\n      });\n    }\n    if (user) {\n      toast.success(\"Password Reset Successfull\");\n      dispatch({\n        type: RESET_PASSWORD_RESET\n      });\n      navigate(\"/notes\");\n    }\n  }, [error, user, dispatch, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mine-container mt-5\",\n    children: [loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"input\",\n          placeholder: \"Enter Password\",\n          onChange: e => setPassword(e.target.value),\n          value: password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-mine\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"JzgczCRlbuA5SXPsYXvUPfLyZy8=\", false, function () {\n  return [useParams, useNavigate, useSelector, useDispatch];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","passwordReset","Spinner","useParams","useNavigate","toast","RESET_PASSWORD_RESET","jsxDEV","_jsxDEV","ResetPassword","_s","password","setPassword","token","navigate","resetPassword","state","loading","error","user","dispatch","submitHandler","e","preventDefault","type","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","target","value","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/Notiy/frontend/src/screens/ResetPassword.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { passwordReset } from \"../actions/forgotPasswordActions\";\nimport Spinner from \"../components/Spinner\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { RESET_PASSWORD_RESET } from \"../constants/forgotPasswordConstants\";\n\nconst ResetPassword = () => {\n  const [password, setPassword] = useState(\"\");\n  const { token } = useParams();\n  const navigate = useNavigate();\n\n  const resetPassword = useSelector((state) => state.resetPassword);\n  const { loading, error, user } = resetPassword;\n\n  const dispatch = useDispatch();\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(passwordReset(token, password));\n  };\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      dispatch({ type: RESET_PASSWORD_RESET });\n    }\n\n    if (user) {\n      toast.success(\"Password Reset Successfull\");\n      dispatch({ type: RESET_PASSWORD_RESET });\n      navigate(\"/notes\");\n    }\n  }, [error, user, dispatch, navigate]);\n\n  return (\n    <div className=\"mine-container mt-5\">\n      {loading && <Spinner />}\n      <form className=\"form\" onSubmit={submitHandler}>\n        <h4>Reset Password</h4>\n\n        <div className=\"div\">\n          <input\n            type=\"password\"\n            className=\"input\"\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            value={password}\n          />\n\n          <button className=\"btn-mine\">Reset Password</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}