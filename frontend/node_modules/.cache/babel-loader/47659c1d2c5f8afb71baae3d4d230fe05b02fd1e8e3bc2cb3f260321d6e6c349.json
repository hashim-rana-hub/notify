{"ast":null,"code":"import { CREATE_NOTE_REQUEST, CREATE_NOTE_SUCCESS, CREATE_NOTE_FAIL, GET_NOTES_REQUEST, GET_NOTES_SUCCESS, GET_NOTES_FAIL, DELETE_NOTE_REQUEST, DELETE_NOTE_SUCCESS, DELETE_NOTE_FAIL } from \"../constants/noteConstants\";\nimport { API_URL } from \"./forgotPasswordActions\";\nimport axios from \"axios\";\nexport const noteCreate = note => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_NOTE_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(`${API_URL}/api/v1/note`, note, {\n      withCredentials: true\n    });\n    dispatch({\n      type: CREATE_NOTE_SUCCESS,\n      payload: data.note\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_NOTE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const noteGet = (page = \"1\", keyword = \"\") => async dispatch => {\n  try {\n    dispatch({\n      type: GET_NOTES_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`${API_URL}/api/v1/note?page=${page}&keyword=${keyword}`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: GET_NOTES_SUCCESS,\n      payload: {\n        notes: data.notes,\n        totalNotes: data.totalNotes\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_NOTES_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const noteDelete = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_NOTE_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`${API_URL}/api/v1/note/${id}`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: DELETE_NOTE_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_NOTE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["CREATE_NOTE_REQUEST","CREATE_NOTE_SUCCESS","CREATE_NOTE_FAIL","GET_NOTES_REQUEST","GET_NOTES_SUCCESS","GET_NOTES_FAIL","DELETE_NOTE_REQUEST","DELETE_NOTE_SUCCESS","DELETE_NOTE_FAIL","API_URL","axios","noteCreate","note","dispatch","type","data","post","withCredentials","payload","error","response","message","noteGet","page","keyword","get","notes","totalNotes","noteDelete","id","delete"],"sources":["/Users/apple/Documents/Notiy 2/frontend/src/actions/noteActions.js"],"sourcesContent":["import {\n  CREATE_NOTE_REQUEST,\n  CREATE_NOTE_SUCCESS,\n  CREATE_NOTE_FAIL,\n  GET_NOTES_REQUEST,\n  GET_NOTES_SUCCESS,\n  GET_NOTES_FAIL,\n  DELETE_NOTE_REQUEST,\n  DELETE_NOTE_SUCCESS,\n  DELETE_NOTE_FAIL,\n} from \"../constants/noteConstants\";\nimport { API_URL } from \"./forgotPasswordActions\";\n\nimport axios from \"axios\";\n\nexport const noteCreate = (note) => async (dispatch) => {\n  try {\n    dispatch({\n      type: CREATE_NOTE_REQUEST,\n    });\n\n    const { data } = await axios.post(`${API_URL}/api/v1/note`, note, {\n      withCredentials: true,\n    });\n\n    dispatch({\n      type: CREATE_NOTE_SUCCESS,\n      payload: data.note,\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_NOTE_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\nexport const noteGet =\n  (page = \"1\", keyword = \"\") =>\n  async (dispatch) => {\n    try {\n      dispatch({\n        type: GET_NOTES_REQUEST,\n      });\n\n      const { data } = await axios.get(\n        `${API_URL}/api/v1/note?page=${page}&keyword=${keyword}`,\n        {\n          withCredentials: true,\n        }\n      );\n\n      dispatch({\n        type: GET_NOTES_SUCCESS,\n        payload: {\n          notes: data.notes,\n          totalNotes: data.totalNotes,\n        },\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_NOTES_FAIL,\n        payload: error.response.data.message,\n      });\n    }\n  };\n\nexport const noteDelete = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: DELETE_NOTE_REQUEST,\n    });\n\n    const { data } = await axios.delete(`${API_URL}/api/v1/note/${id}`, {\n      withCredentials: true,\n    });\n\n    dispatch({\n      type: DELETE_NOTE_SUCCESS,\n      payload: data.message,\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_NOTE_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n"],"mappings":"AAAA,SACEA,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAChBC,iBAAiB,EACjBC,iBAAiB,EACjBC,cAAc,EACdC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,QACX,4BAA4B;AACnC,SAASC,OAAO,QAAQ,yBAAyB;AAEjD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK,MAAOC,QAAQ,IAAK;EACtD,IAAI;IACFA,QAAQ,CAAC;MACPC,IAAI,EAAEd;IACR,CAAC,CAAC;IAEF,MAAM;MAAEe;IAAK,CAAC,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEP,OAAQ,cAAa,EAAEG,IAAI,EAAE;MAChEK,eAAe,EAAE;IACnB,CAAC,CAAC;IAEFJ,QAAQ,CAAC;MACPC,IAAI,EAAEb,mBAAmB;MACzBiB,OAAO,EAAEH,IAAI,CAACH;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPC,IAAI,EAAEZ,gBAAgB;MACtBgB,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,OAAO,GAClBA,CAACC,IAAI,GAAG,GAAG,EAAEC,OAAO,GAAG,EAAE,KACzB,MAAOX,QAAQ,IAAK;EAClB,IAAI;IACFA,QAAQ,CAAC;MACPC,IAAI,EAAEX;IACR,CAAC,CAAC;IAEF,MAAM;MAAEY;IAAK,CAAC,GAAG,MAAML,KAAK,CAACe,GAAG,CAC7B,GAAEhB,OAAQ,qBAAoBc,IAAK,YAAWC,OAAQ,EAAC,EACxD;MACEP,eAAe,EAAE;IACnB,CACF,CAAC;IAEDJ,QAAQ,CAAC;MACPC,IAAI,EAAEV,iBAAiB;MACvBc,OAAO,EAAE;QACPQ,KAAK,EAAEX,IAAI,CAACW,KAAK;QACjBC,UAAU,EAAEZ,IAAI,CAACY;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPC,IAAI,EAAET,cAAc;MACpBa,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC;AAEH,OAAO,MAAMO,UAAU,GAAIC,EAAE,IAAK,MAAOhB,QAAQ,IAAK;EACpD,IAAI;IACFA,QAAQ,CAAC;MACPC,IAAI,EAAER;IACR,CAAC,CAAC;IAEF,MAAM;MAAES;IAAK,CAAC,GAAG,MAAML,KAAK,CAACoB,MAAM,CAAE,GAAErB,OAAQ,gBAAeoB,EAAG,EAAC,EAAE;MAClEZ,eAAe,EAAE;IACnB,CAAC,CAAC;IAEFJ,QAAQ,CAAC;MACPC,IAAI,EAAEP,mBAAmB;MACzBW,OAAO,EAAEH,IAAI,CAACM;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdN,QAAQ,CAAC;MACPC,IAAI,EAAEN,gBAAgB;MACtBU,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IAC/B,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}